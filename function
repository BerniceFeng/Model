class ConvNet(nn.Module):
    def __init__(self, output_size, hidden_size, dropout_rate):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(1, hidden_size, kernel_size=(3, 1))
        self.bn1 = nn.BatchNorm2d(hidden_size)
        self.dropout1 = nn.Dropout(dropout_rate)
        self.conv2 = nn.Conv2d(hidden_size, hidden_size, kernel_size=(3, 1))
        self.bn2 = nn.BatchNorm2d(hidden_size)
        self.dropout2 = nn.Dropout(dropout_rate)
        self.fc_input_dim = self._get_conv_output_dim()
        self.fc = nn.Linear(self.fc_input_dim, output_size)

    def _get_conv_output_dim(self):
        with torch.no_grad():
            dummy_input = torch.zeros(1, 1, n_features, 1)
            x = self.conv1(dummy_input)
            x = self.conv2(x)
            x = x.view(1, -1)
            return x.size(1)

    def forward(self, x):
        x = torch.relu(self.bn1(self.conv1(x)))
        x = self.dropout1(x)
        x = torch.relu(self.bn2(self.conv2(x)))
        x = self.dropout2(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = torch.sigmoid(self.fc(x))  # For multilabel classification
        return x
