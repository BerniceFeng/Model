class CNN(nn.Module):
    def __init__(self, output_size, hidden_size, dropout_rate):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(1, hidden_size, kernel_size=(3, 1))
        self.bn1 = nn.BatchNorm2d(hidden_size)
        self.dropout1 = nn.Dropout(dropout_rate)
        self.conv2 = nn.Conv2d(hidden_size, hidden_size, kernel_size=(3, 1))
        self.bn2 = nn.BatchNorm2d(hidden_size)
        self.dropout2 = nn.Dropout(dropout_rate)
        self.fc = nn.Linear((n_features - 4) * hidden_size, output_size)

    def forward(self, x):
        x = torch.relu(self.bn1(self.conv1(x)))
        x = self.dropout1(x)
        x = torch.relu(self.bn2(self.conv2(x)))
        x = self.dropout2(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = torch.sigmoid(self.fc(x)
        return x
